/################# BACKEND #################\

rodar: 

npm run dev

#1 CONFIGURACAO INICIAL

COMMANDS USED:

npm init -y
npm install typescript --save-dev
npm i express
npm install @types/express --save-dev
npx tsc --init
npm i cors cookie-parser dotenv jsonwebtoken morgan nodemon bcrypt
npm i ts-node-dev typescript --save-dev   //Serve pro TS entender nossos imports


Agora vamos criar o script pra rodar nosso projeto:

  "scripts": {
    "dev": "ts-node-dev --transpile-only src/server.ts",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

Agora testamos nossas rotas e td funciona


##########################################

#2 TRATANDO ERROS DA API

Usar dep:

npm i express-async-errors

Criamos o file routes.ts
Criamos o file server.ts onde tratamos os erros e testamos as rotas

Instalaçao e configuraçao do cors como typagem TS:
npm i @types/cors --save-dev


##########################################

#3 CONECTANDO AO DB

1° Abrir o PGADMIN e criar o DB
2° Abrir o BEEKEEPER e conectar com o postgreSQL
3° Conectar com PRISMA

Rodamos o cmd no diretorio do project SERVER: 

npm install prisma --save-dev
npm i @prisma/client
npx prisma init

Mudar URL no file .env para a certa do postgreSQL e pronto conectou.


##########################################
PAREI NO 07:04 CRIANDO TABELAS
#4 CRIANDO TABELAS

Instalar extensao do PRISMA VSCODE e PRISMA INSIDER

Vamos configurar o prisma, entao vamos criar uma pasta com nome prisma dentro do src

Depois devemos modelar nosso DB dentro do nosso SCHEMA que esta na cartella fora do src "prisma"

Vamos precisar de tabelas para:

Tabela USER:
 -Id
 -Nome: string
 -Email: string
 -Senha: string
 -age: number
 -weight: number
 -height: number
 -subscription_id: string

USER + TREINOS (RELACAO 1 - N) 1 User pode ter varios treinos

Tabela TREINOS:
 -Id
 -nome: String
 -time: number
 -qtExercises: number
 -description: string
 -currentRep
 -currentWeight
 -stepTitle
 -stepDescription

USER + SUBS (RELACAO 1 - 1)

Tabela Subscription

 -id: uuid
 -status: string
 -priceId: string
 -user_id: (FK) string

Agora vamos criar o modelo user em nosso schema.prisma na PASTA PRISMA

OBS: PARA IDENTIFICAR AS RELACOES NAS TABELAS BASTA OLHAR PARA O FIGMA E ENTENDER QUAIS AS RELACOES DENTRO DO APP

Feito os modelos devemos rodar um comando para rodar as relacoes das tabelas:

npx prisma migrate dev

Nome da Migration: create_tables