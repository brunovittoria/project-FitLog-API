/################# BACKEND #################\


#1 CONFIGURACAO INICIAL

  Documentaçao dos Requisitos: https://docs.google.com/document/d/1_eMr_LubXI2ynhCsAPCB6odESqUneLR7B4E6fY0UbU4/edit#heading=h.n7g99tnubyho

  COMMANDS USED:

  yarn install
  yarn init
  yarn add typescript --save-dev
  yarn add @types/express --save-dev
  npx tsc --init
  yarn add cors cookie-parser dotenv jsonwebtoken morgan nodemon bcryptjs express
  yarn add ts-node-dev typescript --save-dev   //Serve pro TS entender nossos imports
  yarn add @types/bcryptjs --save-dev


  Agora vamos criar o script pra rodar nosso projeto:

    "scripts": {
      "dev": "ts-node-dev --transpile-only src/server.ts",
      "test": "echo \"Error: no test specified\" && exit 1"
    },

  Agora testamos nossas rotas e td funciona


------------------------------------------


#2 TRATANDO ERROS DA API

  Usar dep:

  yarn add express-async-errors

  Criamos o file routes.ts
  Criamos o file server.ts onde tratamos os erros e testamos as rotas

  Instalaçao e configuraçao do cors como typagem TS:
  yarn add @types/cors --save-dev


------------------------------------------


#3 CONECTANDO AO DB

  1° Abrir o PGADMIN e criar o DB
  2° Abrir o BEEKEEPER e conectar com o postgreSQL
  3° Conectar com PRISMA

  Rodamos o cmd no diretorio do project SERVER: 

  yarn add prisma --save-dev
  yarn add @prisma/client
  npx prisma init

  Mudar URL no file .env para a certa do postgreSQL e pronto conectou.


------------------------------------------


#4 CRIANDO MODELOS

  Vamos criar os modelos do MONGODB para as seguintes collections

  Collection USER:
  -Id
  -Nome: string
  -Email: string
  -Senha: string
  -age: number
  -weight: number
  -height: number
  -subscription_id: string

  USER + TREINOS (RELACAO 1 - N) 1 User pode ter varios treinos

  Collection TREINOS:
  -Id
  -Nome
  -description
  -exercices
  -status: 

  WORKOUTS + EXERCISES (RELACAO 1 - N) 1 Workout pode ter varios exercicios

  Collection Exercises:
  -Id
  -

  USER + SUBS (RELACAO 1 - 1)

  Collection Subscription

  -id: uuid
  -status: string
  -priceId: string
  -user_id: (FK) string

  Agora vamos criar o modelo user em nosso schema.prisma na PASTA PRISMA

  OBS: PARA IDENTIFICAR AS RELACOES NAS Collections BASTA OLHAR PARA O FIGMA E ENTENDER QUAIS AS RELACOES DENTRO DO APP

  Feito os modelos devemos rodar um comando para rodar as relacoes das Collections:

  npx prisma migrate dev

  Nome da Migration: create_tables


------------------------------------------


#5 CRIANDO ESTRUTURA

  Iremos criar nossa estrutura de controllers e services.
  Lembre-se sempre de antes de construir alguma funcionalidade, olhar o figma file para visualizar quais funcionalidades o app pode precisar.

  Criar as pastas de todos useCases e depois criar o codigo 1 por 1
  
  -Controller (Controlador):

    O que é: Imagine um controlador como um maestro em uma orquestra. Ele recebe pedidos (como uma música específica) e direciona os músicos para executar as ações necessárias.

    Exemplo: Em um jogo, o controlador seria como um jogador que pressiona os botões para fazer o personagem se mover ou pular.

  -Services (Serviços):

    O que são: Os serviços são como assistentes que realizam tarefas específicas. Eles são como pessoas especializadas em fazer algo muito bem.

    Exemplo: Se pensarmos em uma biblioteca, o serviço seria como o bibliotecário que organiza os livros, ajuda as pessoas a encontrar o que precisam e verifica se os livros estão em bom estado.

  ****EXEMPLOS REAIS****

  -Como funcionam rotas, controllers e serviços?

    o user acessa a rota e a rota vai chamar o controller que ira fazer alguma acao. Dentro do controller basicamente pegamos algo recebido pelo front como o body, auth, token, query params...

    Dentro do controller chamamos um serviço para executar uma açao de acordo com oque pegamos do nosso front.

    O serviço que se ocupa de manipular o DB, desde criar, atualizar, editar e deletar dentro do DB e devolver a informaçao pro controller se deu certo ou nao e o controller devolve pro usuario o via res.json o exito da operaçao.

  -Postman
    Depois de criado o controller, services e rota lembrar de fazer uma requesiçao de TESTE sempre no Postman


------------------------------------------


#6 CADASTRANDO USUARIO

  Agora iremos cadastrar os usuarios quando eles fizerem o registro em nosso form la no nosso DB

  Files modificados: src > controllers > user + src > services > user + src > routes > User Routes


------------------------------------------


#7 LOGANDO USUARIOS NO DB 

  Criamos un novo file que ira controlar quando o usuario se logar, AuthUserController.ts
  E o servico que ira tratar do login no file AuthUserService.ts

  Agora devemos configurar nossa rota de login

  Devemos instalar os types do JWT:

  npm i --save-dev @types/jsonwebtoken

  Feito isso vamos no file .env e criamos nossa senha secreta que somente nos podemos ter acesso

  (TODA VEZ QUE MEXER NO FILE .ENV LEMBRAR DE PARAR O PROJETO E RODAR-LO NOVAMENTE)

  Lembrar de mudar o strict true para FALSE para o TS ler as props globais dos files .env

  Apos criar o service , controller e route. Devemos testar nossa rota no POSTMAN


------------------------------------------


#8 CRIANDO MIDDLEWARES

  O middleware ele inicia antes de qualquer coisa tanto como o controller ou service ele vai ser tipo o "GUARDA" que se algo nao tiver correto ira barrar o acesso a rota

  Aqui criamos o service, controller e rota para pegar detalhes do usuario.

  Porem antes de fazer o GET dessas informaçoes sensiveis do usuario, queremos criar um "validador/middleware" antes de chegar na rota para saber se o token é compativel com o usuario.

  EXEMPLO:

  Em nosso app vamos supor que um hacker tente pegar a rota e acessar-la, ele pode fazer isso caso a rota seja publica, caso seja privada sera impossivel, portanto vamos aprender a "Verificar users" antes deles puderem acessar a rota.

  Criamos nosso primeiro middleware (isAuthenticated.ts)

  Na criaçao é importante testar no POSTMAN pra saber se esta caindo nos condicionais, testamos nosso token com o bearer inserindo o token gerado no login e colocamos o prefixo "Bearer"

  Criamos um file "types" que contem a tipagem sobreescrevendo a tipagem do express.

  Devemos descomentar o typeRoots do tsconfig.json e colocar o path do nosso file @types pra que o typescript entenda nossa declaraçao do FILE.


------------------------------------------


#9 USECASES USER #TODO PAREI AQUI!

  01 - CRIAR USER

    Ja fizemos esse useCase no ponto #6.

  02 - GETONE USER #TODO CRIEI TUDO BASTE TESTAR NO POSTMAN

    Iremos criar um useCase para pegar um user especifico

    Dentro da pasta de getOneUser Criamos o file service.ts

    E agora criamos o controller: controller.ts

    Criamos nossa rota

    E por ultimo nao podemos esquecer de testar no Postman


  03 - UPDATE USER
  
    - Lembrar que iremos precisar adicionar nesse useCase no service o HEIGHT, WEIGHT (Ver o UserSchema Model)
    Iremos criar um useCase para atualizar um user especifico

    Dentro da pasta de updateUser Criamos o file service.ts

    E agora criamos o controller

    Criamos nossa rota

    E por ultimo nao podemos esquecer de testar no Postman

  
  04 - DELETE USER
  
    Iremos criar um useCase para deletar um user especifico

    Dentro da pasta de removeUser Criamos o file service.ts

    E agora criamos o controller: controller.ts

    Criamos nossa rota

    E por ultimo nao podemos esquecer de testar no Postman


------------------------------------------


#10 USECASES EXERCISES


------------------------------------------


#11 USECASES WORKOUTS


------------------------------------------


#12 USECASES SUBSCRIPTIONS (Ver VIDEO Matheus para a configuraçao correta das useCases)

  01 - CRIAR SUBSCRIPTION

  02 - USECASE CHECK SUBSCRIPTION

    Iremos criar um useCase para checar se o user tem uma SUBSCRIPTION ativa ou nao.

    Começamos criando o file CheckSubsService.ts

    E agora criamos o controller: CheckSubsController.ts

    Criamos nossa rota

    E por ultimo nao podemos esquecer de testar no Postman


------------------------------------------

