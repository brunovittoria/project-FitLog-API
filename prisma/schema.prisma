// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  name String
  email String
  password String
  stripe_customer_id String?
  age Int?
  weight Int?
  height Int?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("users")  //Dessa forma ao fazer o map estamos declarando que o nome do modelo User sera users na tabela do DB

  //Atribuindo relaçao User X Subs
  subscriptions Subscription? //Relacao 1 X 1

  //Atribuindo relaçao User X Workouts
  workouts Workout[] //Abrindo [] quer dizer que 1 USER pode ter varios WORKOUTS Relacao 1 X N
}

model Subscription{
  id String @id //Esse Id nao sera gerado automaticamente, entao n botamos defualt
  status String
  priceId String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("subscriptions")

  //Criando a relaçao entre User X Subscription
  userId String @unique
  user User @relation(fields: [userId], references: [id])
}

model Workout{
  id String @id @default(uuid())
  name String
  time Int
  qtExercise Int
  description String
  currentRep Int
  currentWeigth Int
  stepTitle String
  stepDescription String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("workouts")
  //Relacionando WORKOUTS com USER
  user User @relation(fields: [user_id], references: [id])
  user_id String
}